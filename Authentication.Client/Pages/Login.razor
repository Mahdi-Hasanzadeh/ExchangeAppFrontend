@rendermode InteractiveWebAssembly
@page "/login"
@using Authentication.Client.ClientAuthentication
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Shared.View_Model
@inject HttpClient HTTP
@inject IJSRuntime JS
@inject ClientAuthenticationStateProvider AuthStateProvider

<CustomToast />


@if (!OperatingSystem.IsBrowser())
{
    <LoadingWithImage />
}
else
{
    <AuthorizeView Context="authContext">
        <Authorized>
            @* <LoadingTitle Content="برای دوباره وارد شدن به اکانت تان،از اکانت خود خارج شوید." /> *@
        </Authorized>
        <NotAuthorized >
            <div class="flex items-center justify-center p-4">
                <div class="w-full max-w-md bg-gradient-to-br from-slate-50 to-blue-50 rounded-xl shadow-lg p-8">
                    <h3 class="text-2xl text-center mb-4 ">صفحه ورود</h3>
                    <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
                        <DataAnnotationsValidator />

                        <div class="space-y-6">
                            <!-- Username Field -->
                            <div>
                                <label class="block text-lg font-medium text-gray-700 mb-2">
                                    نام کاربری
                                </label>
                                <div class="relative">
                                    <InputText @bind-Value="Model.Username"
                                               class="w-full px-4 py-3 border border-gray-300 rounded-lg
                                        focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                                        placeholder-gray-400 focus:outline-none transition-all duration-200" />
                                    <ValidationMessage For="() => Model.Username"
                                                       class="mt-1 text-sm text-red-600" />
                                </div>
                            </div>

                            <!-- Password Field -->
                            <div>
                                <label class="block text-lg font-medium text-gray-700 mb-2">
                                    رمز
                                </label>
                                <div class="relative">
                                    <InputText @bind-Value="Model.Password"
                                               class="w-full px-4 py-3 border border-gray-300 rounded-lg
                                        focus:ring-2 focus:ring-blue-500 focus:outline-none focus:border-blue-500
                                        placeholder-gray-400 transition-all duration-200" />
                                    <ValidationMessage For="() => Model.Password"
                                                       class="mt-1 text-sm text-red-600" />
                                </div>
                            </div>

                            <!-- Error Message -->
                            <div class="p-3 bg-red-50 rounded-lg border border-red-200"
                                 style="@(string.IsNullOrEmpty(errorMessage) ?"display:none;" : "")">
                                <span class="text-red-600 text-sm">@errorMessage</span>
                            </div>

                            <!-- Submit Button -->
                            <button type="submit"
                                    disabled="@_isDisabled"
                                    class="w-full py-3 px-4 bg-blue-500 hover:bg-blue-600 text-white
                             font-medium rounded-lg transition-colors duration-200">
                                ورود
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
}

@code {

    #region Public Fields

    // [CascadingParameter]
    // public HttpContext? HttpContext { get; set; }

    #endregion

    #region Private Fields

    [SupplyParameterFromForm(FormName = "LoginForm")]
    private LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    [SupplyParameterFromQuery]
    private string ReturnURL { get; set; } = "/";

    private bool _isDisabled { get; set; } = false;
    #endregion

    #region Life Cycyle Methods
    #endregion

    #region Private Methods

    private string? encodedJWT;

    private async Task Authenticate()
    {
        try
        {
            _isDisabled = true;
            var response = await HTTP.PostAsJsonAsync<object>($"api/User/login", Model);
            var user = await response.Content.ReadFromJsonAsync<ApiResponse<string>>();
            if (!user.Success || user.Data == null)
            {
                // toastService.ShowError(@localizer[nameof(ResourceStringsError.InvalidCredentials)]);
                errorMessage = "اطلاعات وارد شده درست نمی باشد.";
                return;
            }
            // var claims = user.Data!.Select(dto => new Claim(dto.Type, dto.Value)).ToList();

            encodedJWT = user.Data;
            var jwtHandler = new JwtSecurityTokenHandler();

            if (jwtHandler.CanReadToken(encodedJWT))
            {
                var decodedJWT = jwtHandler.ReadJwtToken(encodedJWT);

                // Extract claims from the JWT token
                List<Claim> claims = decodedJWT.Claims.ToList();
                // await JS.InvokeVoidAsync("localStorage.setItem", "jwt_token", encodedJWT);


                var jwtToken = user.Data;

                // ✅ Store JWT and update authentication state
                await AuthStateProvider.SignInAsync(jwtToken);

                // ✅ Set Authorization header for API requests
                HTTP.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);

                toastService.ShowSuccess($"با موفقیت وارد حساب خود شدید.");
                await Task.Delay(2000);
                Navigation.NavigateTo("/", forceLoad: true);
                // Navigation.NavigateTo("/");
                return;

                // add jwt token inside the claim
                // claims.Add(new Claim("jwt_token", encodedJWT));

                // HTTP.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.
                // AuthenticationHeaderValue("Bearer", encodedJWT);

                // var identity = new ClaimsIdentity(claims, AuthConstant.Scheme);
                // var principal = new ClaimsPrincipal(identity);
                // var authProperties = new AuthenticationProperties
                //     {
                //         IsPersistent = truewe can get this value from User
                //     };
                // await HttpContext!.SignInAsync(AuthConstant.Scheme, principal, authProperties);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("خطای رخ داده است.لطفا دوباره امتحان کنید.");
        }
        finally
        {
            _isDisabled = false;
        }

    }

    #endregion

}


