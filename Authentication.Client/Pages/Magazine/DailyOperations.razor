@page "/journal/dailyOperations"
@using Authentication.Client.Pages.Modals.Print
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.QuickGrid
@using Shared.DTOs.CustomerDTOs
@using Shared.DTOs.GeneralLedgerDTOs
@using Shared.DTOs.Report
@rendermode InteractiveWebAssembly
@attribute [StreamRendering]

<PageTitle>عملیات روز</PageTitle>

@if (!OperatingSystem.IsBrowser())
{
    <LoadingWithImage />
}
else
{
    <AuthorizeView Roles="@($"{UserRole.SuperAdmin},{UserRole.Admin}")">
        <Authorizing>
            <LoadingWithImage Content="در حال تایید هویت شما..." />
        </Authorizing>
        <NotAuthorized>
            <NoPermission />
        </NotAuthorized>
        <Authorized Context="authContext">
            <CustomToast />

            <DailyOperationsPrintModal @ref="printModal"
                                       TransactionDetails="_transactionsList"
                                       _currenciesList="_currenciesList"
                                       FromDate="@FromDate.SelectedDateTime.ToAfghanistanCalendarDateOnly()"
                                       ToDate="@ToDate.SelectedDateTime.ToAfghanistanCalendarDateOnly()" />

            <div class="container mx-auto md:px-3">
                @if (_initialLoading)
                {
                    <LoadingTitle />
                }
                else
                {
                    <div class="container mx-auto md:px-3">
                        <div class="shadow-md px-5 py-4 rounded-2xl mx-auto mt-2">
                            <h5 class="text-2xl font-bold text-gray-800 mb-2">لیست تراکنش روزانه</h5>
                            <hr class="my-4 border-t-2 border-gray-300 opacity-50" />

                            <div class="flex gap-4 justify-around items-center mb-1">
                                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4 w-2/3 items-center">
                                    <div>
                                        <Label Content="نوع ارز" />
                                        <InputSelectCurrencyMapping FirstOption="همه" CurrencyList="_currenciesList"
                                                                    @bind-BindValueTo="_selectedCurrency" />
                                    </div>
                                    @* <div class="gap-2"> *@
                                    <div>
                                        <Label Content="از تاریخ" />
                                        <AfghanModernPersianCalendar @ref="FromDate"
                                                                     SelectedDateTimeValueChanged="DateChange">
                                        </AfghanModernPersianCalendar>
                                    </div>

                                    <div>
                                        <Label Content="تا تاریخ" />
                                        <AfghanModernPersianCalendar @ref="ToDate"
                                                                     SelectedDateTimeValueChanged="DateChange">
                                        </AfghanModernPersianCalendar>
                                    </div>
                                    @* <div>
                                                <InputDate @bind-Value="FromDate"
                                                           class="w-full border rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" />

                                            </div>

                                            <div>

                                                <Label Content="تا تاریخ" />
                                                <InputDate @bind-Value="ToDate"
                                                           class="w-full border rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" />

                                            </div> *@
                                    @* </div> *@
                                </div>
                                <div class="mr-auto">
                                    <MdSuccessButton ButtonType="button"
                                                     ButtonWidth="8rem"
                                                     IsDisabled="_isDisabled"
                                                     Content="اعمال فیلتر"
                                                     OnClick="handleFilter" />
                                </div>
                                <div class="mr-auto">
                                    <MdInfoButton ButtonType="button"
                                                  IsDisabled="_isDisabled"
                                                  Content="چاپ"
                                                  OnClick="Print" />
                                </div>
                            </div>

                            <hr class="my-4 border-t-2 border-gray-300 opacity-50" />

                            @if (_loadingTransactions)
                            {
                                <LoadingTitle Content="در حال بارگیری لیست تراکنش روزانه..." />
                            }

                            else
                            {
                                <div class="border rounded-lg shadow-sm bg-white overflow-hidden">
                                    <div class="overflow-x-auto">
                                        @if (_loading)
                                        {
                                            <LoadingTitle Content="در حال بارگیری تراکنش ها" />
                                        }
                                        else if (_transactionsList?.Count == 0 || _transactionsList == null)
                                        {
                                            <NoDataFound Content="هیچ تراکنشی یافت نشد." />
                                        }
                                        else
                                        {
                                            <QuickGrid Virtualize Class="w-full border-collapse quick-grid"
                                                       Items="_transactionsList.AsQueryable()"
                                                       Pagination="paginationState">

                                                <PropertyColumn Property="f => f.TransactionId"
                                                                Title="شماره پیگیری" Sortable="true" />

                                                <PropertyColumn Property="f => f.CustomerName"
                                                                Title="نام حساب" Sortable="true" />
                                                <PropertyColumn Property="f => f.CreatedDate.ToAfghanistanCalendarDateOnly()"
                                                                Title="تاریخ" Sortable="true" />
                                                <PropertyColumn Property="f => f.DepositOrWithdrawBy"
                                                                Title="شرح" Sortable="true" Class="max-w-[10rem] whitespace-normal break-words" />
                                                <PropertyColumn Property="f => f.Description"
                                                                Title="تفصیلات" Sortable="true" Class="max-w-[10rem] whitespace-normal break-words" />

                                                <TemplateColumn Title="نوع ارز">
                                                    <div class="flex gap-3 justify-start items-center">
                                                        <img src="@(context.CurrencyImage != null ? context.CurrencyImage.ConvertByteArrayToImage() : "images/defaultMoney.jpeg" )"
                                                             class="w-7 h-7 object-cover rounded-full border-2 border-white" />
                                                        <p>@context.CurrencyName</p>
                                                    </div>
                                                </TemplateColumn>

                                                <TemplateColumn Title="مقدار" Class="whitespace-nowrap">
                                                    <div class="@(context.Amount < 0 ? "text-red-500 px-2 py-1" : context.Amount == 0 ? "text-blue-500 text-2xl px-2 py-1" : "text-green-500 px-2 py-1")">
                                                        @Math.Abs(context.Amount).ToFormattedDecimal() @(context.Amount < 0 ? "-" : "")
                                                    </div>
                                                </TemplateColumn>

                                                <PropertyColumn Property="f => Expressions.DealTypeDictionary[f.DealType]"
                                                                Title="نوع معامله" Sortable="true" />

                                                <PropertyColumn Property="f => Expressions.TransactionTypeDictionary[f.TransactionType]"
                                                                Title="نوع تراکنش" Sortable="true" />

                                            </QuickGrid>
                                        }

                                    </div>
                                </div>

                                <!-- Pagination -->

                                <div class="mt-4">
                                    <Paginator State="@paginationState" />
                                </div>

                                <style>
                                    #myInputDatePicker {
                                        font-family: 'Arial', sans-serif;
                                        padding: 12px 15px;
                                        font-size: 16px;
                                        background-color: #f9f9f9;
                                        border: 1px solid #FF6F61;
                                        border-radius: 8px;
                                        width: 100%;
                                        outline: none;
                                        transition: all 0.3s ease;
                                    }

                                        /* Add focus effect */
                                        #myInputDatePicker:focus {
                                            border-color: #FF6F61;
                                            box-shadow: 0 0 5px rgba(255, 111, 97, 0.8);
                                        }

                                        /* Add placeholder color and style */
                                        #myInputDatePicker::placeholder {
                                            color: #999;
                                            font-style: italic;
                                        }

                                    /* CSS for the form control */
                                    .form-control {
                                        font-size: 16px;
                                        color: #333;
                                        border-radius: 8px;
                                        padding: 12px;
                                        margin-top: 10px;
                                    }

                                    /* Styling the container or surrounding area */
                                    h3 {
                                        font-family: 'Tahoma', sans-serif;
                                        color: #333;
                                        margin-bottom: 20px;
                                    }
                                </style>


                                <style>
                                    /* Add global table styling */
                                    .quick-grid table {
                                        border-spacing: 0;
                                        width: 100%;
                                    }

                                    .quick-grid tr {
                                        padding: 5px 0;
                                    }

                                        .quick-grid tr:hover {
                                            background-color: #f8fafc;
                                            cursor: pointer;
                                        }

                                    .quick-grid td {
                                        border-bottom: 1px solid #e2e8f0;
                                        padding: 0.75rem;
                                        font-size: 1.2rem;
                                    }

                                    .quick-grid th {
                                        background-color: #f1f5f9;
                                        padding: 0.75rem;
                                        font-weight: 600;
                                        font-size: 1.2rem;
                                        text-align: right;
                                    }
                                </style>

                                <hr class="my-4 border-t-2 border-gray-300 opacity-50" />
                                <div class="shadow-sm bg-white rounded-xl p-5 overflow-x-auto border border-gray-200">
                                    <h1 class="text-2xl font-bold text-gray-800 mb-2">محاسبه کل تراکنش های ارزها</h1>

                                    <table class="min-w-full">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th class="px-3 py-3 text-center font-medium text-gray-600 text-lg border-b-2 border-gray-100">ارز</th>
                                                <th class="px-3 py-3 text-center font-medium text-gray-600 text-lg border-b-2 border-gray-100">باقیمانده</th>
                                                <th class="px-3 py-3 text-center font-medium text-gray-600 text-lg border-b-2 border-gray-100">وضعیت</th>
                                            </tr>
                                        </thead>
                                        <tbody class="bg-white">
                                            @foreach (var currency in _currencyTransactionSummary)
                                            {
                                                <tr class="group relative transition-all duration-150 ease-in-out hover:-translate-y-1
                                                                hover:shadow-lg border-b border-gray-200 group-hover:opacity-100 rounded-lg
                                                                hover:cursor-pointer even:bg-gray-100">

                                                    <td class="px-5 py-4 flex justify-center text-gray-700 font-medium">
                                                        <div class="flex items-center justify-between px-1 gap-1 min-w-[6rem] w-[6rem]">
                                                            <div class="whitespace-nowrap"><p>@currency.CurrencyName</p></div>
                                                            <img src="@(currency.CurrencyImage?.ConvertByteArrayToImage() ?? "images/defaultMoney.jpeg")"
                                                                 class="w-7 h-7 object-cover rounded-full border-2 border-white shrink-0">
                                                        </div>
                                                    </td>
                                                    <!--Reminder-->
                                                    <td class="px-5 py-4 text-center font-medium">
                                                        @if (currency.Reminder > 0)
                                                        {
                                                            <span class="text-green-500">
                                                                @currency.Reminder.ToFormattedDecimal()
                                                            </span>
                                                        }
                                                        else if (currency.Reminder == 0)
                                                        {
                                                            <span class="text-blue-500 text-2xl">
                                                                0
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-red-500">
                                                                @(Math.Abs(currency.Reminder).ToFormattedDecimal())-
                                                            </span>
                                                        }
                                                    </td>

                                                    <td class="px-5 py-4 text-center font-medium">
                                                        @if (currency.Reminder > 0)
                                                        {
                                                            <span class="text-green-500">طلبکار</span>
                                                        }
                                                        else if (currency.Reminder == 0)
                                                        {
                                                            <span class="text-blue-500 text-2xl">0</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-red-500">بدهکار</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </Authorized>
    </AuthorizeView>
}


@code {

    #region Private Fields

    List<BreadcrumbItem> _breadcrumbItems = new()
    {
    new BreadcrumbItem("روزنامه"),
    new BreadcrumbItem("عملیات روز"),
    };

    private DailyOperationsPrintModal printModal;

    AfghanModernPersianCalendar FromDate = new AfghanModernPersianCalendar();

    AfghanModernPersianCalendar ToDate = new AfghanModernPersianCalendar();

    private void DateChange()
    {
        // StateHasChanged();
    }

    // private DateTime FromDate { get; set; } = DateTime.Now;

    // private DateTime ToDate { get; set; } = DateTime.Now;

    private Dictionary<int, CurrencyDTO> _currenciesList { get; set; } = new();

    private bool _isDisabled { get; set; }

    private bool _initialLoading { get; set; }

    private bool _loadingTransactions { get; set; }

    private int _userId { get; set; }

    private string? _jwtToken { get; set; }

    private bool _isAuthenticated { get; set; }

    private List<TransactionHistoryDTO> _transactionsList { get; set; } = new();

    private List<CurrencyTransactionSummary> _currencyTransactionSummary = new List<CurrencyTransactionSummary>();

    private PaginationState paginationState = new PaginationState { ItemsPerPage = 15 };

    [CascadingParameter]
    private Task<AuthenticationState> _state { get; set; }

    private CancellationTokenSource? _cts = new();

    private int _selectedCurrency { get; set; } = 0;

    private bool _loading { get; set; } = false;

    #endregion

    #region Private Methods

    async Task FetchCurrencies()
    {
        try
        {
            _loadingTransactions = true;
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.
            AuthenticationHeaderValue("Bearer", _jwtToken);

            // Fetch All currencies
            string url = $"api/Currency";

            var response = await _httpClient.GetFromJsonAsync<ApiResponse<IEnumerable<CurrencyDTO>>>(url);
            if (response == null || !response.Success)
            {
                toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.FailedToLoadCurrencies)]);
                return;
            }
            _currenciesList = response.Data.ToDictionary(item => item.CurrencyId, item => item);
            await FetchTransactions();
        }
        catch (Exception ex)
        {
            toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.ServerError)]);
        }
        finally
        {
            _loadingTransactions = false;
        }
    }

    async Task handleFilter()
    {
        _isDisabled = true;
        _loading = true;
        // DateTime dateTime1 = FromDate.SelectedDateTime;
        // DateTime dateTime2 = ToDate.SelectedDateTime;
        await FetchTransactions();
        _loading = false;

        _isDisabled = false;
    }

    void Print()
    {
        printModal?.Show();
    }

    void CalculateTotalOfTransaction()
    {
        // toastService.ShowInfo(DateTime.Now.Second.ToString());
        _currencyTransactionSummary = _transactionsList
            .GroupBy(t => t.CurrencyId)
            .Select(group => new CurrencyTransactionSummary
                {
                    CurrencyId = group.Key,
                    CurrencyImage = group.FirstOrDefault()?.CurrencyImage,
                    CurrencyName = group.FirstOrDefault()?.CurrencyName,
                    // TotalDeposits = group.Where(t => t.DealType == DealType.Deposit).Sum(t => t.Value.Amount),
                    // TotalWithdrawals = group.Where(t => t.DealType == DealType.Withdraw).Sum(t => t.Value.Amount),
                    Reminder = group.Sum(balance => balance.Amount)
                }).OrderBy(t => t.CurrencyId).ToList();
        // toastService.ShowInfo(DateTime.Now.Second.ToString());

    }

    async Task FetchTransactions()
    {
        try
        {
            var authenticatedUser = await _state;
            _isAuthenticated = authenticatedUser.User.Identity.IsAuthenticated;
            if (!_isAuthenticated)
            {
                toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.NotAuthenticated)]);
                return;
            }
            var jwtToken = authenticatedUser.ExtractJWTFromToken();
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.
            AuthenticationHeaderValue("Bearer", jwtToken);

            // string url = $"api/CustomerAccount/balances?currencyId=1";
            var fromDate = FromDate.SelectedDateTime;
            var toDate = ToDate.SelectedDateTime;
            string url = $"api/CustomerTransaction/dailyTransactions?currencyId={_selectedCurrency}&fromDate={fromDate}&toDate={toDate}";

            _cts?.Cancel();
            _cts?.Dispose();
            _cts = new CancellationTokenSource();
            var token = _cts.Token;

            DateTime todayDate = DateTime.Now;


            var response = await _httpClient.PostAsJsonAsync(url, todayDate, token);
            var result = await response.Content.ReadFromJsonAsync<ApiResponse<IEnumerable<TransactionHistoryDTO>>>();

            if (!response.IsSuccessStatusCode || response == null)
            {
                toastService.ShowError(result.Message);
                return;
            }

            if (!result.Success)
            {
                toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.FailedToLoadCustomerTransactions)]);
                return;
            }

            _transactionsList = result.Data.ToList();

            CalculateTotalOfTransaction();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.ServerError)]);
        }
    }

    #endregion

    #region Life Cycles

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authenticatedUser = await _state;
            _isAuthenticated = authenticatedUser.User.Identity.IsAuthenticated;

            if (!_isAuthenticated)
            {
                _initialLoading = false; // Set this early
                StateHasChanged(); // Force UI update
                return;
            }

            _userId = int.Parse(authenticatedUser.ExtractUserIdFromToken());
            _jwtToken = authenticatedUser.ExtractJWTFromToken();
            await FetchCurrencies();
        }
        catch
        {
            // If an exception occurs, JS is not available (likely prerendering)
            // IsPrerendering = true;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FromDate.SelectedDateTime = DateTime.Now;
            ToDate.SelectedDateTime = DateTime.Now;
        }
    }

    #endregion

}
