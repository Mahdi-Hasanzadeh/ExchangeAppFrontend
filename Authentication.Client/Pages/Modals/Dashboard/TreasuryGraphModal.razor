@using Shared.View_Model.CustomerAccount
@rendermode InteractiveWebAssembly
@inject IJSRuntime JS
@attribute [StreamRendering]

<div class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50 transition-opacity duration-300 ease-in-out"
     @onclick="HandleBackgroundClick"
     style="opacity: @(isModalOpen ? "1" : "0"); pointer-events:@(isModalOpen ? "auto" : "none");">

    <div class="relative bg-white shadow-2xl rounded-2xl w-full max-w-6xl max-h-[90vh] overflow-y-auto transform transition-all duration-500 ease-out p-6 sm:p-10"
         style="transform: @(isModalOpen ? "scale(1)" : "scale(0)");"
         @onclick:stopPropagation="true">

        <!-- Close Button -->
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-semibold text-gray-800">صندوق</h2>
            <button @onclick="CloseModal" class="text-gray-500 hover:text-red-500 transition text-xl">✕</button>
        </div>

        <!-- Divider -->
        <hr class="mb-6 border-slate-300 opacity-70" />

        @if (_loadingBalances)
        {
            <LoadingTitle Content="در حال بارگیری حسابات صندوق..." />
        }
        else
        {
            <!-- Chart Section -->
            <div class="flex flex-col items-center justify-center gap-4">
                <h3 class="text-lg font-medium text-gray-700 mb-2">گراف موجودی صندوق</h3>

                <div class="w-full">
                    <div class="bg-gray-50 rounded-xl p-4 shadow-inner">
                        <div id="lineChartContainer"></div>
                    </div>
                </div>
            </div>
        }



        <!-- Optional Footer or Notes -->
        <div class="mt-6">
            <hr class="mb-4 border-slate-300 opacity-70" />
            <p class="text-sm text-gray-500 text-center">گراف بر اساس اطلاعات امروز بروزرسانی شده است.</p>
        </div>

    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }

    [Parameter]
    public bool isModalOpen { get; set; } = false;

    [Parameter]
    public EventCallback OnClose { get; set; }

    private bool _loadingBalances { get; set; } = false;

    private string _errorMessage = "";

    private int _userId { get; set; }

    private string _jwtToken { get; set; }

    private bool _isAuthenticated { get; set; }

    private List<CustomerBalanceDetailsDTO> _customerBalances { get; set; } = new();


    private async Task CloseModal()
    {
        await OnClose.InvokeAsync(); // Calls toggleModal() in the parent
    }

    private void HandleBackgroundClick(MouseEventArgs e)
    {
        CloseModal();
    }

    public async Task FetchTreasuryBalance()
    {
        try
        {
            _loadingBalances = true;
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.
            AuthenticationHeaderValue("Bearer", _jwtToken);

            string url = $"api/CustomerAccount/treasuryBalance/{_userId}";

            var response = await _httpClient
            .GetFromJsonAsync<ApiResponse<List<CustomerBalanceDetailsDTO>>>(url);

            if (response == null || !response.Success)
            {
                toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.FailedToLoadCustomerBalance)]);
                return;
            }

            _customerBalances = response.Data;
            await JS.InvokeVoidAsync("renderTreasuryBalanceChart", "lineChartContainer", _customerBalances);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.ServerError)]);
        }
        finally
        {
            _loadingBalances = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authenticatedUser = await _authenticationState;
            _isAuthenticated = authenticatedUser.User.Identity.IsAuthenticated;
            if (!_isAuthenticated)
            {
                toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.NotAuthenticated)]);
                return;
            }
            _userId = int.Parse(authenticatedUser.ExtractUserIdFromToken());
            _jwtToken = authenticatedUser.ExtractJWTFromToken();

     
  
            await JS.InvokeVoidAsync("dynamicScriptLoader.loadDashboardScripts");

            await FetchTreasuryBalance();
        }
    }
}

